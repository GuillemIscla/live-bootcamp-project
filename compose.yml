services:
  app-service:
    image: guillemis/app-service # specify name of image on Docker Hub
    restart: "always" # automatically restart container when server crashes
    environment: # set up environment variables
      AUTH_SERVICE_IP: ${AUTH_SERVICE_IP:-localhost} # Use localhost as the default value
    ports:
      - "8000:8000" # expose port 8000 so that applications outside the container can connect to it 
    depends_on: # only run app-service after auth-service has started
      auth-service:
        condition: service_started
  auth-service:
    image: guillemis/auth-service
    restart: "always" # automatically restart container when server crashes
    environment:
      JWT_SECRET: ${JWT_SECRET} 
      DATABASE_URL: "postgres://postgres:${POSTGRES_PASSWORD}@db:5432"
    ports:
      - "3000:3000" # expose port 3000 so that applications outside the container can connect to it 
    depends_on:
      - db
  nginx:
    image: nginx:alpine
    container_name: nginx_reverse_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/letsencrypt:ro          # Certificates from Certbot
      - ./certbot/www:/var/www/certbot      # ACME challenge files
    depends_on:
      - app-service
      - auth-service
    restart: always

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certs:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: sh -c "trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; sleep 12h & wait $${!}; done"

  db:
    image: postgres:15.2-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
  redis:
    image: redis:7.0-alpine
    restart: always
    ports:
      - "6379:6379"

volumes:
  db:
    driver: local
  certs: